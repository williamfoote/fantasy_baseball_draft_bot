points_df <- rbind(points_df, data.frame(name = player_data$name, category = categories_with_total, points = points))
}
# Pivot longer for ggplot
# points_long <- points_df %>%
#   pivot_wider(cols = -PlayerId, names_to = "category", values_to = "points")
# Create the bar plot
if(type == 'pitch') {
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- pivot_wider(points_df, names_from = 'category', values_from = 'points') %>%
select(W, QS, SO, IP, ER)
if(min(data) < 0) {
data <- data - min(data)
}
data <-rbind(rep(max(data),5) , rep(0,5) , data)
# Prepare color
colors_border=c(rgb(0.99,0.73,0.15,0.9), rgb(0.4,0.6,0.8,0.9))
colors_in=c( rgb(0.99,0.73,0.15,0.4), rgb(0.4,0.6,0.8,0.4))
ylim_min <- min(points_df$points) - 10
# Custom the radarChart !
par(mar = c(0, 0, 0, 0))
radarchart( data, axistype=1, pcol=c('#FDB927', '#6699CC'), pfcol=colors_in, plwd=1, plty=1,
cglcol="grey", cglty=1, axislabcol="grey",
caxislabels=seq(min(points_df$points),max(data),max(data) / 5),
cglwd=1.1, vlcex=1)
# Legend
legend(x=0.85, y=1, legend = c(unique(points_df$name)[1], unique(points_df$name)[2]),
bty = "n", pch=20 , col=c('#FDB927', '#6699CC') , text.col = "black", cex=0.9, pt.cex=1.6)
points_df %>% filter(category == 'Total') %>%
ggplot(aes(x = category, y = points, fill = factor(name))) +
geom_bar(stat = 'identity', position = position_dodge(width = 0.9), width = 0.95) +
geom_textbox(inherit.aes = F, aes(x = category, y = points, group = factor(name),
label = paste(round(points), sep = '')),
fill = 'white', col = 'black', size = 4,
height = NULL,
width = NULL, box.margin = unit(c(0, 0, 0, 0), 'pt'),
box.padding = unit(c(.075), 'cm'),
show.legend = FALSE,
position = position_dodge(width = 0.9), hjust = 0.5) +
ylab('Projected Points') +
ggtitle(paste(unique(points_df$name)[1], 'vs.' , unique(points_df$name)[2], "Distribution of Proj. Fantasy Points"),
subtitle = 'Source: Underdog Fantasy, Fangraphs, Steamer Projections') +
dark_theme_gray() +
theme(axis.text.x = element_text(size = 15, colour = 'white'),
axis.text.y = element_text(size = 15, colour = 'white'),
axis.title.x = element_blank(),
axis.ticks = element_line(unit(0, 'pt'))) +
ylim(ylim_min, max(points_df$points) + 100) +
scale_fill_manual(values = c('#FDB927', '#6699CC')) +
guides(fill=guide_legend(title=""))
} else {
ylim_min <- 0
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- pivot_wider(points_df, names_from = 'category', values_from = 'points') %>%
select(Tot_BB, HBP, X1B, X2B, X3B, HR, RBI, R, SB)
data <-rbind(rep(max(data),9) , rep(0,9) , data)
# Prepare color
colors_border=c(rgb(0.99,0.73,0.15,0.9), rgb(0.4,0.6,0.8,0.9))
colors_in=c( rgb(0.99,0.73,0.15,0.4), rgb(0.4,0.6,0.8,0.4))
par(mar = c(0, 0, 0, 0))
# Custom the radarChart !
radarchart( data, axistype=1, pcol=colors_border , pfcol=colors_in ,
plwd=1, plty=1, cglcol="grey", cglty=1, axislabcol="grey",
caxislabels=seq(0,max(data),max(data) / 5), cglwd=1.1, vlcex=1
)
# Legend
legend(x=0.85, y=1, legend = c(unique(points_df$name)[1], unique(points_df$name)[2]),
bty = "n", pch=20 , col=colors_border , text.col = "black", cex=0.9, pt.cex=1.6)
points_df %>% filter(category == 'Total') %>%
ggplot(aes(x = category, y = points, fill = factor(name))) +
geom_bar(stat = 'identity', position = position_dodge(width = 0.9), width = 0.95) +
geom_textbox(inherit.aes = F, aes(x = category, y = points, group = factor(name),
label = paste(round(points), sep = '')),
fill = 'white', col = 'black', size = 4,
height = NULL,
width = NULL, box.margin = unit(c(0, 0, 0, 0), 'pt'),
box.padding = unit(c(.075), 'cm'),
show.legend = FALSE,
position = position_dodge(width = 0.9), hjust = 0.5) +
ylab('Projected Points') +
ggtitle(paste(unique(points_df$name)[1], 'vs.' , unique(points_df$name)[2], "Distribution of Proj. Fantasy Points"),
subtitle = 'Source: Underdog Fantasy, Fangraphs, Steamer Projections') +
dark_theme_gray() +
theme(axis.text.x = element_text(size = 15, colour = 'white'),
axis.text.y = element_text(size = 15, colour = 'white'),
axis.title.x = element_blank(),
axis.ticks = element_line(unit(0, 'pt'))) +
ylim(ylim_min, max(points_df$points) + 100) +
scale_fill_manual(values = c('#FDB927', '#6699CC')) +
guides(fill=guide_legend(title=""))
}
}
# Example usage with two player IDs
create_spider_graph(c(13125, 27498), type = 'pitch')
create_spider_graph(c(13624, 17350), type = 'bat')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# zips <- read.csv("pitch_zips.csv")
# steamer <- read.csv("pitch_steamer.csv")
# dc <- read.csv("pitch_depthcharts.csv")
atc <- read.csv("~/Documents/GitHub/fantasy_baseball_draft_bot/R-stuff/2024/data/patc_2024.csv")
# bat <- read.csv("pitch_thebat.csv")
# all_dfs <- list(bat = bat, atc = atc, dc = dc, zips = zips, steamer = steamer)
# head(zips)
# head(steamer)
# head(dc)
head(atc)
# head(bat)
# dc$SVHD <- with(dc, SV + HLD)
atc$SVHD <- with(atc, SV + HLD)
# pqs <- function(x) {
#   if (x$GS < 10) { # Probably not a starter
#     p_qs <- 0
#   } else {
#     W <- x$W
#     L <- x$L
#     G <- x$G
#     IP <- x$IP
#     ER <- x$ER
#     intercept <- 0.08434435
#     x_w <- 0.17309031
#     x_l <- -0.20007936
#     x_g <- -0.09077845
#     x_ip <- 0.06996364
#     x_er <- 0.03699742
#     p_qs <- intercept + W*x_w + L*x_l + G*x_g + IP*x_ip + ER*x_er
#   }
#   p_qs
# }
#
#
# df_lengths <- c(nrow(zips), nrow(steamer), nrow(dc), nrow(atc))
#
# for(i in seq_len(df_lengths[1])) {
#   zips$QS[[i]] <- pqs(zips[i, ])
# }
#
# for(i in seq_len(df_lengths[2])) {
#   steamer$QS[[i]] <- pqs(steamer[i, ])
# }
#
# for(i in seq_len(df_lengths[3])) {
#   dc$QS[[i]] <- pqs(dc[i, ])
# }
#
# for(i in seq_len(df_lengths[4])) {
#   atc$QS[[i]] <- pqs(atc[i, ])
# }
cats <- c("IP", "SO", "W", "ERA", "WHIP", "SV")
order_small_to_large <- c("bat", "atc", "dc", "zips", "steamer")
me1 <- function(x, y, cat = "QS", by = "playerid") { # If i were 1
temp <- merge(x[, c("Name", by, cat)], y[, c(by, cat)], by = by)
temp
}
me2 <- function(x, y, cat = "QS", by = "playerid") { # If i were greater than 1
temp <- merge(x, y[, c(by, cat)], by = by)
temp
}
atc$wERA <- atc$ERA * atc$IP
atc$wWHIP <- atc$WHIP * atc$IP
pitch <- atc %>%
select(Name, Team, PlayerId, IP, SO, QS, wERA, wWHIP, ERA, WHIP, SVHD)
atc$wERA <- atc$ERA * atc$IP
atc$wWHIP <- atc$WHIP * atc$IP
pitch <- atc %>%
select(Name, Team, PlayerId, IP, SO, W, wERA, wWHIP, ERA, WHIP, SV)
z_score <- function(x) {
x <- as.numeric(x)
m <- mean(x, na.rm = TRUE)
s <- sd(x, na.rm = TRUE)
z <- (x - m) / s
z
}
pitching_2 <- pitch
temp <- apply(pitching_2[, -c(1:3)], 2, z_score)
pitching_2 <- cbind(pitching_2[, c(1, 2, 3)], temp)
pitching_2$ERA <- -1 * pitching_2$ERA
pitching_2$WHIP <- -1 * pitching_2$WHIP
sums <- apply(pitching_2[, -c(1, 2, 3)], 1, sum)
pitching_3 <- pitching_2
pitching_3$pr <- sums
head(pitching_3)
pitching_ordered <- pitching_3[order(pitching_3$pr, decreasing = TRUE), ]
# Repeat the calculations on only the top 300
# Normalize to this number to compare against batters better
temp <- left_join(pitching_ordered[1:300, 1:3], pitch, by = c("Name", 'Team', 'PlayerId'))
pitching_2 <- temp
temp <- apply(pitching_2[, -c(1:3)], 2, z_score)
pitching_2 <- cbind(pitching_2[, c(1, 2, 3)], temp)
pitching_2$ERA <- -1 * pitching_2$ERA
pitching_2$WHIP <- -1 * pitching_2$WHIP
sums <- apply(pitching_2[, -c(1, 2, 3)], 1, sum)
pitching_3 <- pitching_2
pitching_3$pr <- sums
head(pitching_3)
pitching_ordered <- pitching_3[order(pitching_3$pr, decreasing = TRUE), ]
pitching_ordered$rank <- 1:300
pitching_ordered$pos <- 'SP'
colnames(pitch)
colnames(atc)
atc$wERA <- atc$ERA * atc$IP
atc$wWHIP <- atc$WHIP * atc$IP
pitch <- atc %>%
select(Name, Team, PlayerId, IP, SO, W, wERA, wWHIP, ERA, WHIP, SV)
names(pitch)
pitching_2 <- pitch
temp <- apply(pitching_2[, -c(1:3)], 2, z_score)
pitching_2 <- cbind(pitching_2[, c(1, 2, 3)], temp)
pitching_2$ERA <- -1 * pitching_2$ERA
pitching_2$WHIP <- -1 * pitching_2$WHIP
sums <- apply(pitching_2[, -c(1, 2, 3)], 1, sum)
pitching_3 <- pitching_2
pitching_3$pr <- sums
head(pitching_3)
pitching_ordered <- pitching_3[order(pitching_3$pr, decreasing = TRUE), ]
# Repeat the calculations on only the top 300
# Normalize to this number to compare against batters better
temp <- left_join(pitching_ordered[1:300, 1:3], pitch, by = c("Name", 'Team', 'PlayerId'))
pitching_2 <- temp
temp <- apply(pitching_2[, -c(1:3)], 2, z_score)
pitching_2 <- cbind(pitching_2[, c(1, 2, 3)], temp)
pitching_2$ERA <- -1 * pitching_2$ERA
pitching_2$WHIP <- -1 * pitching_2$WHIP
sums <- apply(pitching_2[, -c(1, 2, 3)], 1, sum)
pitching_3 <- pitching_2
pitching_3$pr <- sums
head(pitching_3)
pitching_ordered <- pitching_3[order(pitching_3$pr, decreasing = TRUE), ]
pitching_ordered$rank <- 1:300
pitching_ordered$pos <- 'SP'
names(pitching_ordered)
z_score <- function(x) {
x <- as.numeric(x)
m <- mean(x, na.rm = TRUE)
s <- sd(x, na.rm = TRUE)
z <- (x - m) / s
z
}
process_pitching_data <- function(data, z_score_cols, top_n = NULL) {
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, !(names(data) %in% z_score_cols)], temp)
# Modify specific columns
data_processed$ERA <- -1 * data_processed$ERA
data_processed$WHIP <- -1 * data_processed$WHIP
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_pitching_data(data_top_n, z_score_cols))
}
# Add rank and position columns
data_processed$rank <- seq_len(nrow(data_processed))
data_processed$pos <- 'SP'
return(data_processed)
}
# Example usage:
z_score_columns <- c("IP", "SO", "W", "wERA", "wWHIP", "SV")
processed_data <- process_pitching_data(pitch, z_score_columns, top_n = 300)
processed_data
View(processed_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# bzip <- read.csv("bat_zips.csv")
bsteamer <- read.csv("~/Documents/GitHub/fantasy_baseball_draft_bot/R-stuff/2024/data/batc_2024.csv")
# bdc <- read.csv("bat_dc.csv")
# bbat <- read.csv("bat_bat.csv")
# batc <- read.csv("bat_atc_23.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# bzip <- read.csv("bat_zips.csv")
batc <- read.csv("~/Documents/GitHub/fantasy_baseball_draft_bot/R-stuff/2024/data/batc_2024.csv")
batc$TB <- with(batc, SLG * AB)
# bsteamer$RC <- with(bsteamer, ((H+BB+HBP-CS)*(TB+.26*(BB+HBP))+.52*(SB))/(AB+BB+HBP))
# bzip$RC <- with(bzip, ((H+BB+HBP-CS)*(TB+.26*(BB+HBP))+.52*(SB))/(AB+BB+HBP))
# If they have HBP and CS in the projections:
batc$RC <- with(batc, ((H+BB+HBP-CS)*(TB+.26*(BB))+.52*(SB))/(AB+BB))
# batc$RC <- with(batc, ((H+BB+HBP-CS)*(TB+.26*(BB))+.52*(SB))/(AB+BB))
# Without HBP and CS:
#batc$RC <- with(batc, ((H+BB)*(TB+.26*(BB))+.52*(SB))/(AB+BB))
# bbat$RC <- with(bbat, ((H+BB-CS)*(TB+.26*(BB))+.52*(SB))/(AB+BB))
# bdc$RC <- with(bdc, ((H+BB+HBP-CS)*(TB+.26*(BB+HBP))+.52*(SB))/(AB+BB+HBP))
bsteamer$wAVG <- bsteamer$AVG * bsteamer$AB
bsteamer$wOPS <- bsteamer$OPS * bsteamer$AB
batting <- batc %>%
select(Name, Team, PlayerId, AB, R, HR, RBI, SB, wAVG, AVG)
batc$wAVG <- batc$AVG * batc$AB
batc$wOPS <- batc$OPS * batc$AB
batting <- batc %>%
select(Name, Team, PlayerId, AB, R, HR, RBI, SB, wAVG, AVG)
names(batting)
z_score <- function(x) {
x <- as.numeric(x)
m <- mean(x, na.rm = TRUE)
s <- sd(x, na.rm = TRUE)
z <- (x - m) / s
z
}
process_pitching_data <- function(data, z_score_cols, top_n = NULL) {
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, !(names(data) %in% z_score_cols)], temp)
# Modify specific columns
data_processed$ERA <- -1 * data_processed$ERA
data_processed$WHIP <- -1 * data_processed$WHIP
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_pitching_data(data_top_n, z_score_cols))
}
# Add rank and position columns
data_processed$rank <- seq_len(nrow(data_processed))
data_processed$pos <- 'SP'
return(data_processed)
}
# Example usage:
z_score_columns <- c(SO", "W", "wERA", "wWHIP", "SV")
z_score <- function(x) {
x <- as.numeric(x)
m <- mean(x, na.rm = TRUE)
s <- sd(x, na.rm = TRUE)
z <- (x - m) / s
z
}
process_pitching_data <- function(data, z_score_cols, top_n = NULL) {
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, !(names(data) %in% z_score_cols)], temp)
# Modify specific columns
data_processed$ERA <- -1 * data_processed$ERA
data_processed$WHIP <- -1 * data_processed$WHIP
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_pitching_data(data_top_n, z_score_cols))
}
# Add rank and position columns
data_processed$rank <- seq_len(nrow(data_processed))
data_processed$pos <- 'SP'
return(data_processed)
}
# Example usage:
z_score_columns <- c("SO", "W", "wERA", "wWHIP", "SV")
processed_data <- process_pitching_data(pitch, z_score_columns, top_n = 300)
# Assuming the z_score function is already defined as before
# z_score <- function(x) { ... }
process_batting_data <- function(data, z_score_cols, top_n = NULL) {
non_cats_names <- c('Name', 'Team', 'PlayerId', 'AB', 'AVG', 'OPS')
non_cats <- which(names(data) %in% non_cats_names)
# Apply z-score to specified columns
temp <- apply(data[, -non_cats, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, non_cats], temp)
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_batting_data(data_top_n, z_score_cols))
}
# Add rank column
data_processed$rank <- seq_len(nrow(data_processed))
# Join with raw data for context
batting_raw <- data[, !(names(data) %in% c(z_score_cols, "AB", "AVG", "OPS"))]
names(batting_raw)[-c(1:3)] <- paste(names(batting_raw)[-c(1:3)], '_raw', sep = '')
almost_done <- merge(data_processed, batting_raw, by = c("Name", 'Team', 'PlayerId'))
final_bat <- almost_done[, c(1:4, (ncol(batting_raw) + 1):(ncol(batting_raw) + 6), 5:(ncol(batting_raw)))]
return(final_bat)
}
# Example usage:
z_score_columns <- c("wAVG", "R", "RBI", "HR", "SB")
processed_batting_data <- process_batting_data(batting, z_score_columns, top_n = 300)
View(processed_batting_data)
# Assuming the z_score function is already defined as before
# z_score <- function(x) { ... }
process_batting_data <- function(data, z_score_cols, top_n = NULL) {
non_cats_names <- c('Name', 'Team', 'PlayerId', 'AB', 'AVG', 'OPS')
non_cats <- which(names(data) %in% non_cats_names)
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, non_cats], temp)
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_batting_data(data_top_n, z_score_cols))
}
# Add rank column
data_processed$rank <- seq_len(nrow(data_processed))
# Join with raw data for context
batting_raw <- data[, !(names(data) %in% c(z_score_cols, "AB", "AVG", "OPS"))]
names(batting_raw)[-c(1:3)] <- paste(names(batting_raw)[-c(1:3)], '_raw', sep = '')
almost_done <- merge(data_processed, batting_raw, by = c("Name", 'Team', 'PlayerId'))
final_bat <- almost_done[, c(1:4, (ncol(batting_raw) + 1):(ncol(batting_raw) + 6), 5:(ncol(batting_raw)))]
return(final_bat)
}
# Example usage:
z_score_columns <- c("wAVG", "R", "RBI", "HR", "SB")
processed_batting_data <- process_batting_data(batting, z_score_columns, top_n = 300)
# Assuming the z_score function is already defined as before
# z_score <- function(x) { ... }
process_batting_data <- function(data, z_score_cols, top_n = NULL) {
non_cats_names <- c('Name', 'Team', 'PlayerId', 'AB', 'AVG', 'OPS')
non_cats <- which(names(data) %in% non_cats_names)
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, non_cats], temp)
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, z_score_cols, drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_batting_data(data_top_n, z_score_cols))
}
# Add rank column
data_processed$rank <- seq_len(nrow(data_processed))
# Join with raw data for context
batting_raw <- data[, !(names(data) %in% c(z_score_cols, "AB", "AVG", "OPS"))]
names(batting_raw)[-c(1:3)] <- paste(names(batting_raw)[-c(1:3)], '_raw', sep = '')
almost_done <- merge(data_processed, batting_raw, by = c("Name", 'Team', 'PlayerId'))
final_bat <- almost_done[, c(1:4, (ncol(batting_raw) + 1):(ncol(batting_raw) + 6), 5:(ncol(batting_raw)))]
return(final_bat)
}
# Example usage:
z_score_columns <- c("wAVG", "R", "RBI", "HR", "SB")
processed_batting_data <- process_batting_data(batting, z_score_columns, top_n = 300)
process_batting_data <- function(data, z_score_cols, top_n = NULL) {
non_cats_names <- c('Name', 'Team', 'PlayerId', 'AB', 'AVG', 'OPS')
non_cats <- which(names(data) %in% non_cats_names)
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, non_cats], temp)
# Sum of all z-score normalized columns
data_processed$pr <- rowSums(data_processed[, names(temp), drop = FALSE], na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_batting_data(data_top_n, z_score_cols))
}
# Add rank column
data_processed$rank <- seq_len(nrow(data_processed))
# Join with raw data for context
batting_raw <- data[, !(names(data) %in% c(z_score_cols, "AB", "AVG", "OPS"))]
names(batting_raw)[-c(1:3)] <- paste(names(batting_raw)[-c(1:3)], '_raw', sep = '')
almost_done <- merge(data_processed, batting_raw, by = c("Name", 'Team', 'PlayerId'))
# Adjusting column indices to include 'pr'
final_bat <- almost_done[, c(1:3, (ncol(data_processed) - length(z_score_cols) + 1):ncol(data_processed),
4:(ncol(data_processed) - length(z_score_cols)),
(ncol(data_processed) + 1):ncol(almost_done))]
return(final_bat)
}
# Example usage:
z_score_columns <- c("wAVG", "R", "RBI", "HR", "SB")
processed_batting_data <- process_batting_data(batting, z_score_columns, top_n = 300)
process_batting_data <- function(data, z_score_cols, top_n = NULL) {
non_cats_names <- c('Name', 'Team', 'PlayerId', 'AB', 'AVG', 'OPS')
non_cats <- which(names(data) %in% non_cats_names)
# Apply z-score to specified columns
temp <- apply(data[, z_score_cols, drop = FALSE], 2, z_score)
# Combine with original data (excluding the z-scored columns)
data_processed <- cbind(data[, non_cats], temp)
# Sum of all z-score normalized columns for 'pr'
data_processed$pr <- rowSums(temp, na.rm = TRUE)
# If top_n is specified, filter and recompute
if (!is.null(top_n)) {
data_ordered <- data_processed[order(data_processed$pr, decreasing = TRUE), ]
data_top_n <- head(data_ordered, top_n)
# Repeat the process for the top_n rows
return(process_batting_data(data_top_n, z_score_cols))
}
# Add rank column
data_processed$rank <- seq_len(nrow(data_processed))
# Join with raw data for context
batting_raw <- data[, !(names(data) %in% c(z_score_cols, "AB", "AVG", "OPS"))]
names(batting_raw)[-c(1:3)] <- paste(names(batting_raw)[-c(1:3)], '_raw', sep = '')
almost_done <- merge(data_processed, batting_raw, by = c("Name", 'Team', 'PlayerId'))
# Adjusting column indices to include 'pr'
final_bat <- almost_done[, c(1:3, (ncol(data_processed) - length(z_score_cols) + 1):ncol(data_processed),
4:(ncol(data_processed) - length(z_score_cols)),
(ncol(data_processed) + 1):ncol(almost_done))]
return(final_bat)
}
# Example usage:
z_score_columns <- c("wAVG", "R", "RBI", "HR", "SB")
processed_batting_data <- process_batting_data(batting, z_score_columns, top_n = 300)
View(batc)
View(batting_in_order)
